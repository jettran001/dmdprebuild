# BUGS & ISSUES TRACKER (chuẩn hóa 2024-09-02)

============================================================

## KẾT QUẢ CARGO CLIPPY - NGÀY [2024-10-21]

Đã chạy `cargo clippy --all-features -- -D warnings` và không phát hiện lỗi.

Chỉ có một cảnh báo không liên quan đến mã nguồn:
```
warning: Patch `curve25519-dalek v3.2.1 (https://github.com/dalek-cryptography/curve25519-
dalek?tag=3.2.1#29e5c29b)` was not used in the crate graph.
Check that the patched package version and available features are compatible
with the dependency requirements. If the patch has a different version from
what is locked in the Cargo.lock file, run `cargo update` to use the new
version. This may also occur with an optional dependency that is not enabled.
```

Cảnh báo này liên quan đến cấu hình Cargo.toml và không ảnh hưởng đến code. Có thể xem xét cập nhật phiên bản thư viện curve25519-dalek trong tương lai.

============================================================

## KẾT QUẢ CARGO CLIPPY - NGÀY [2024-10-22]

Đã chạy `cargo clippy -p snipebot` và phát hiện nhiều lỗi nghiêm trọng, phân loại như sau:

[FIXED][2024-10-22] **snipebot/src/tradelogic/traits.rs**: 
- Trait TradeCoordinator không dyn compatible do các phương thức async, cần tái cấu trúc
- Trait cần được chia thành nhiều trait nhỏ hơn, non-async traits cho dyn dispatch
- Đã sửa: Tách thành TradeCoordinatorBase (non-async) và TradeCoordinatorAsync (async), kết hợp bằng trait TradeCoordinator

[FIXED][2024-10-22] **snipebot/src/analys/token_status/types.rs**:
- `TokenStatus::new()` không được tìm thấy, cần implement hoặc sửa cách khởi tạo
- Đã sửa: Thêm method new() và with_values() cho struct TokenStatus

[FIXED][2024-10-22] **snipebot/src/tradelogic/smart_trade/token_analysis.rs**:
- Multiple log_trade_decision, cần thống nhất implementation
- Đã sửa: Đã thống nhất implementation, sử dụng implementation từ alert.rs

[OPEN][2024-10-22] **snipebot/src/tradelogic/smart_trade/trade_strategy.rs**:
- Các phương thức không tồn tại: get_price_history, detect_large_pending_sells, sell_token, get_token_transactions
- Cần cập nhật tên phương thức hoặc thêm các phương thức thiếu

[FIXED][2024-10-22] **snipebot/src/chain_adapters/evm_adapter.rs**:
- Thêm các phương thức còn thiếu: get_price_history, sell_token, get_token_transactions, detect_large_pending_sells, execute_sell_token

[OPEN][2024-10-22] **snipebot/src/tradelogic/smart_trade/utils.rs**:
- chain_id được gọi như field thay vì method
- Lỗi unwrap_or sử dụng cho f64
- Sử dụng field không tồn tại: deadline, updated_at, transaction_hash
- TradeResult thiếu nhiều field được sử dụng

[OPEN][2024-10-22] **snipebot/src/tradelogic/smart_trade/executor/core.rs**:
- MempoolAnalyzer::new() sai số lượng tham số
- Thiếu các phương thức trong TradeExecutor: get_trade_status, evaluate_token
- Không tương thích với phiên bản trait: get_trade_history có 2 tham số thay vì 3

[OPEN][2024-10-22] **snipebot/src/tradelogic/smart_trade/executor/risk_manager.rs**:
- chain_id được sử dụng như field thay vì method
- Field token_pair không tồn tại
- analyze_trade_risk và các phương thức khác không tồn tại

[OPEN][2024-10-22] **snipebot/src/tradelogic/smart_trade/executor/market_monitor.rs**:
- Các field không tồn tại trong config: position_update_interval_seconds, opportunity_check_interval_seconds
- Không tương thích SharedOpportunity và SharedOpportunityType

[OPEN][2024-10-22] **snipebot/src/tradelogic/mev_logic/strategy.rs**:
- Phương thức evaluate_opportunities, execute_opportunities, analyze_advanced_mempool_opportunities không tồn tại

[OPEN][2024-10-22] **snipebot/src/tradelogic/mev_logic/execution.rs**:
- Variants không tồn tại: Bundle, FlashBots, StandardTransaction trong MevExecutionMethod
- token_a và token_b không tồn tại, cần sử dụng base_token và quote_token

[OPEN][2024-10-22] **snipebot/src/tradelogic/mev_logic/bot.rs**:
- Thiếu implementation cho các phương thức bắt buộc trong MevBot: analyze_trading_opportunity, monitor_token_liquidity
- Lỗi chain_id sử dụng như field thay vì method

[OPEN][2024-10-22] **snipebot/src/tradelogic/common/utils.rs**:
- Mismatch types trong adapter.simulate_swap_amount_out
- Sai số lượng tham số cho get_token_price_history

[OPEN][2024-10-22] **snipebot/src/tradelogic/common/gas.rs**:
- Phương thức get_gas_price không tồn tại hoặc cần import RpcAdapter trait
- get_pending_transaction_count không tồn tại trong MempoolAnalysisProvider

[OPEN][2024-10-22] **snipebot/src/analys/mempool/analyzer.rs**:
- Struct TokenInfo thiếu các field như chain_id, is_honeypot, is_mintable, is_proxy, has_blacklist

Tổng quan:
- Nhiều trait async không tương thích với dyn usages
- Sử dụng field thay vì method, đặc biệt với chain_id
- Khai báo field sai trong structs hoặc sử dụng field không tồn tại
- Gọi phương thức không tồn tại hoặc đã đổi tên
- Thiếu import traits cần thiết (như RpcAdapter)
- Sai số lượng tham số khi gọi phương thức

============================================================

## NHÓM LỖI THEO DOMAIN/MODULE

============================================================

# Ghi chú:
- [OPEN]: Lỗi chưa fix hoặc đang chờ xác nhận.
- [FIXED]: Lỗi đã fix, có mô tả sửa đổi và ngày sửa.
- [PENDING]: Lỗi đã được ghi nhận nhưng file hoặc module tương ứng chưa tồn tại.
- Định dạng: [TRẠNG THÁI][Ngày phát hiện] [module/file] Mô tả ngắn gọn.
- Nếu đã fix: thụt lề mô tả sửa đổi, ngày sửa.

============================================================
# Danh sách lỗi tiềm ẩn và trùng lặp trong blockchain/src

## Lỗi trùng lặp định nghĩa và implementation

1. [FIXED][2024-10-20] **blockchain/src/processor/bridge_orchestrator.rs và snipebot/src/chain_adapters/bridge_adapter.rs**:
   - Trùng lặp định nghĩa và logic liên quan đến bridge
   - Phân tích chi tiết:
     - blockchain/src/processor/bridge_orchestrator.rs định nghĩa BridgeOrchestrator
     - snipebot/src/chain_adapters/bridge_adapter.rs định nghĩa LayerZeroBridge, WormholeBridge và BridgeAdapter
     - common/src/bridge_types/providers.rs đã định nghĩa trait BridgeProvider, BridgeClient, BridgeMonitor và BridgeAdapter
   - Đã sửa:
     - Chuyển BridgeOrchestrator để sử dụng common::bridge_types một cách triệt để
     - Tạo và sử dụng các wrapper struct (LayerZeroWrapper, WormholeWrapper) để implement BridgeProvider đúng cách
     - Xóa bỏ các implementation trùng lặp của BridgeProvider trong các hàm monitor
     - Thống nhất API để cả blockchain/processor và snipebot/chain_adapters đều sử dụng chung định nghĩa từ common/bridge_types

2. [FIXED][2024-10-21] **common/src/network_integration/websocket.rs**:
   - Xóa bỏ imports không sử dụng: StreamExt, SinkExt từ futures_util
   - Code hiện tại là stub implementation nên chỉ cần xóa bỏ imports không sử dụng để tránh cảnh báo từ clippy

3. [FIXED][2024-10-21] **common/src/bridge_types/monitoring.rs**:
   - Xóa bỏ unused imports: bail, Context, Arc
   - Xóa bỏ các constants không cần thiết: DEFAULT_MAX_RETRIES, DEFAULT_RETRY_DELAY, DEFAULT_MONITOR_INTERVAL, DEFAULT_MAX_MONITOR_TIME
   - Thay thế e.context() bằng anyhow::anyhow!() để báo lỗi
   - Cải thiện error message formatting

4. [FIXED][2024-10-21] **common/src/bridge_types/types.rs**:
   - Cập nhật cấu trúc MonitorConfig để thống nhất với cách sử dụng trong monitoring.rs
   - Thay đổi fields:
     - initial_delay -> retry_delay: Duration
     - backoff_factor -> monitor_interval: Duration
     - max_timeout -> max_monitor_time: Duration
   - Chuyển các numeric values sang Duration để rõ ràng hơn về đơn vị thời gian
   - Cập nhật Default impl và constructor
   - Thêm phương thức from_seconds để dễ dàng tạo từ số giây
   - Cập nhật các tests để phù hợp với cấu trúc mới

5. [FIXED][2024-10-21] **common/src/api.rs và common/src/api/mod.rs**:
   - Xóa file trùng lặp common/src/api.rs (file trống) để tránh xung đột với common/src/api/mod.rs
   - File api/mod.rs đã có đầy đủ khai báo module và re-exports cần thiết

6. [FIXED][2024-10-21] **common/src/network_integration/websocket.rs**:
   - Sửa lỗi unused variable: Thêm prefix '_' cho biến connection không sử dụng trong phương thức send_message

============================================================


# Tóm tắt các sửa đổi đã thực hiện ngày 2024-10-16

Đã sửa các lỗi tiềm ẩn sau:

1. [FIXED] **snipebot/src/tradelogic/smart_trade/executor.rs**:
   - Thay thế unwrap() trên sub_id.as_ref() bằng map_or() để xử lý trường hợp None an toàn
   - Thay thế new_tp.unwrap() và new_sl.unwrap() bằng unwrap_or(0.0) để cung cấp giá trị mặc định

2. [FIXED] **snipebot/src/tradelogic/mev_logic/cross_domain.rs**:
   - Sửa partial_cmp().unwrap() thành partial_cmp().unwrap_or(std::cmp::Ordering::Equal) để xử lý NaN
   - Thay thế unwrap() trên duration_since() bằng xử lý lỗi đúng chuẩn với unwrap_or_else và logging

3. [FIXED] **snipebot/src/tradelogic/mev_logic**:
   - Cập nhật trader_behavior.rs để sử dụng hàm analyze_trader_behavior từ common/analysis.rs
   - Xóa implementation trùng lặp từ utils.rs
   - Cập nhật mod.rs để xuất đúng các hàm và cấu trúc từ trader_behavior.rs
   - Tối ưu hóa code trong trader_behavior.rs để tập trung vào việc tái sử dụng code từ common

Các lỗi còn lại cần tiếp tục sửa trong các lần cập nhật tiếp theo. 

============================================================

# Tóm tắt các sửa đổi bổ sung đã thực hiện ngày 2024-10-16

1. [FIXED] **snipebot/src/tradelogic/mev_logic/trader_behavior.rs**:
   - Xóa bỏ các định nghĩa trùng lặp của GasBehavior và TraderBehaviorAnalysis
   - Các struct này đã được import từ common/types.rs để tránh trùng lặp
   - Xóa bỏ duplicate bản thứ hai của hàm analyze_traders_batch
   - Tối ưu hóa việc import type và trait từ common module

2. [FIXED] **snipebot/src/tradelogic/mev_logic/mod.rs**:
   - Cập nhật comment cho việc re-export hàm analyze_traders_batch
   - Sửa phần re-export từ cross_domain.rs: thay thế CrossDomainBridge (không tồn tại) bằng BridgeProvider từ common/bridge_types
   - Tạo re-export cho BridgeProvider và BridgeStatus từ common/bridge_types

3. [FIXED] **snipebot/src/tradelogic/mev_logic/utils.rs**:
   - Đã xác nhận hàm current_time_seconds() sử dụng unwrap_or để xử lý lỗi thay vì unwrap() trực tiếp
   - Không có unwrap() hoặc expect() nào không được xử lý trong file này 

============================================================

# Tóm tắt các sửa đổi đã thực hiện ngày 2024-10-17

1. [FIXED] **snipebot/src/chain_adapters/bridge_adapter.rs**:
   - Sửa import từ crate::bridge_types thành common::bridge_types để đảm bảo nhất quán
   - Đổi tên BridgeAdapter từ common thành BridgeAdapterTrait để làm rõ đây là trait
   - Cập nhật impl CommonBridgeAdapter thành impl BridgeAdapterTrait để phù hợp

2. [FIXED] **snipebot/src/chain_adapters/mod.rs**:
   - Thay đổi cách re-export BridgeAdapter và các thành phần liên quan để tránh nhầm lẫn
   - Chuyển từ crate::bridge_types sang common::bridge_types để thống nhất trong cả module

3. [FIXED] **snipebot/src/tradelogic/mev_logic/bot.rs**:
   - Sửa lỗi cú pháp pattern matching cho việc lấy adapter từ map
   - Thay thế cú pháp không đúng bằng match expression để xử lý Option<T>

4. [FIXED][2024-10-17] **snipebot/src/chain_adapters/bridge_adapter.rs và blockchain/src/processor/bridge_orchestrator.rs**:
   - Trùng lặp functionality: Cả hai file đều triển khai chức năng liên quan đến bridge và wrapper cho BridgeProvider
   - Phân tích:
     - snipebot/src/chain_adapters/bridge_adapter.rs đã re-export các định nghĩa từ common/bridge_types
     - blockchain/src/processor/bridge_orchestrator.rs vẫn có một số interface riêng như LayerZeroClient, WormholeClient
     - Cần hợp nhất và thống nhất sử dụng các trait từ common/bridge_types
   - Đã sửa: Cập nhật import trong bridge_adapter.rs để sử dụng common::bridge_types và đổi tên BridgeAdapter thành BridgeAdapterTrait để tránh nhầm lẫn

5. [FIXED][2024-10-17] **snipebot/src/tradelogic/mev_logic/bot.rs**:
   - Sử dụng unwrap_or không an toàn trên lấy adapter từ map:
   ```rust
   let adapter_opt = self.chain_adapters.read().await.get(&chain_id) {
       Some(adapter) => adapter,
       None => {
           return Err(anyhow::anyhow!("Không có adapter cho chain ID {}", chain_id));
       }
   };
   ```
   - Cần thay thế bằng pattern matching đúng cú pháp hoặc dùng ok_or() để chuyển đổi Option thành Result
   - Đã sửa: Thay thế bằng pattern matching đúng cú pháp:
   ```rust
   let adapter = match self.chain_adapters.read().await.get(&chain_id) {
       Some(adapter) => adapter,
       None => {
           return Err(anyhow::anyhow!("Không có adapter cho chain ID {}", chain_id));
       }
   };
   ```

6. [FIXED][2024-10-17] **snipebot/src/chain_adapters/mod.rs và common/src/bridge_types/providers.rs**:
   - Re-export BridgeAdapter từ hai nguồn khác nhau gây nhầm lẫn:
   ```rust
   pub use crate::bridge_types::BridgeAdapter as CommonBridgeAdapter;
   pub use bridge_adapter::BridgeAdapter as SnipeBotBridgeAdapter;
   ```
   - Cần thống nhất interface và implementation để tránh nhầm lẫn:
   - Đã sửa: Thay đổi cách re-export và đổi tên để rõ ràng hơn:
   ```rust
   pub use common::bridge_types::BridgeAdapter as BridgeAdapterTrait;
   pub use bridge_adapter::BridgeAdapter;
   ```

# Tóm tắt các sửa đổi đã thực hiện ngày 2024-10-18

1. [FIXED][2024-10-18] **snipebot/src/notifications.rs**:
   - Sử dụng unwrap_or_else() trong TelegramChannel::new() khi khởi tạo HTTP client, cần cải thiện
   - Đã sửa:
     - Thay đổi phương thức TelegramChannel::new() để trả về Result<Self> thay vì Self, cho phép truyền lỗi ra ngoài
     - Thêm log chi tiết khi tạo client thất bại và phải sử dụng client mặc định
     - Sử dụng map_err để ghi log lỗi trước khi unwrap_or_else
   ```rust
   pub fn new(token: String, chat_id: String) -> Result<Self> {
       let client = Client::builder()
           .timeout(Duration::from_secs(10))
           .build()
           .map_err(|e| {
               warn!("Không thể tạo HTTP client cho Telegram với cấu hình tùy chỉnh: {}. Sử dụng client mặc định.", e);
               e
           })
           .unwrap_or_else(|_| {
               warn!("Đang sử dụng HTTP client mặc định cho Telegram, có thể bị hạn chế tính năng.");
               Client::new()
           });
       
       Ok(Self { token, chat_id, client, is_ready: true })
   }
   ```

2. [FIXED][2024-10-18] **snipebot/src/tradelogic/coordinator.rs**:
   - Line ~594 sử dụng expect() trong test
   - Đã sửa:
     - Thay thế tất cả các expect() trong phần test bằng xử lý lỗi proper với match và assert!
     - Cung cấp thông báo lỗi chi tiết khi xảy ra lỗi
     - Sửa đổi không làm thay đổi logic của test
   ```rust
   let opportunities = match coordinator.get_all_opportunities().await {
       Ok(opps) => opps,
       Err(e) => {
           assert!(false, "Failed to get opportunities: {}", e);
           return;
       }
   };
   ```

3. [FIXED][2024-10-18] **snipebot/src/tradelogic/smart_trade/executor.rs và analys/token_status/utils.rs**:
   - Sử dụng unwrap_or_else() với hardcode string "Unknown reason"
   - Đã sửa:
     - Thêm các constant cho error message và default values vào constants.rs:
       ```rust
       // Error message constants
       pub const UNKNOWN_FAILURE_REASON: &str = "Unknown reason";
       pub const HIGH_SLIPPAGE_FORMAT: &str = "Abnormally high sell slippage: {}%";
       pub const DEFAULT_TEST_AMOUNT: &str = "0.01";
       ```
     - Cập nhật token_status/utils.rs để sử dụng constant local trong hàm detect_honeypot:
       ```rust
       const UNKNOWN_REASON: &str = "Unknown reason";
       const TEST_AMOUNT: &str = "0.01";
       
       let reason = result.failure_reason.unwrap_or_else(|| UNKNOWN_REASON.to_string());
       ```

# Tóm tắt các sửa đổi mới thực hiện ngày 2024-10-19

1. [FIXED][2024-10-19] **snipebot/src/tradelogic/mev_logic/mod.rs**:
   - Comment không rõ ràng cho hàm analyze_traders_batch
   - Đã sửa:
     - Đơn giản hóa comment cho hàm analyze_traders_batch để làm rõ mục đích
     - Giữ nguyên export để không gây breaking changes
   ```rust
   // Re-export trader behavior analysis function
   pub use trader_behavior::analyze_traders_batch;
   ```

2. [FIXED][2024-10-19] **snipebot/src/tradelogic/coordinator.rs**:
   - Line ~594 sử dụng expect() trong test_opportunity_sharing()
   - Đã sửa:
     - Thay thế các biến trung gian và expect() bằng cách sử dụng pattern matching trực tiếp với if let Err(e)
     - Sử dụng assert! với thông báo lỗi chi tiết thay vì panic!
     - Giữ nguyên logic kiểm tra và kiểm tra các điều kiện như trước
   ```rust
   if let Err(e) = coordinator.register_executor("smart-trade", ExecutorType::SmartTrade).await {
       assert!(false, "Failed to register smart-trade executor: {}", e);
       return;
   }
   ```

3. [FIXED][2024-10-19] **snipebot/src/tradelogic/smart_trade/utils.rs**:
   - Sử dụng chuỗi hardcoded "Unknown reason" trong hàm get_failure_reason()
   - Đã sửa:
     - Tạo các hàm tiện ích mới để xử lý tất cả chuỗi hardcoded
     - Sử dụng các constant từ constants.rs: UNKNOWN_FAILURE_REASON, HIGH_SLIPPAGE_FORMAT, INSUFFICIENT_LIQUIDITY_FORMAT, DEFAULT_TEST_AMOUNT
     - Tạo các hàm get_failure_reason(), format_slippage_error(), format_insufficient_liquidity() và get_default_test_amount()
     - Đơn giản hóa các hàm để dễ dàng sử dụng và bảo trì

4. [FIXED][2024-10-19] **snipebot/src/tradelogic/mev_logic/bot.rs**:
   - Lỗi pattern matching không đúng cú pháp trong hàm estimate_transaction_success_probability
   - Đã sửa:
     - Thay thế phương thức cũ sử dụng unwrap_or không an toàn với mô hình match
     - Cập nhật pattern matching để xử lý Option<T> một cách đúng đắn
     - Cung cấp xử lý lỗi phù hợp với logging khi adapter không tìm thấy
   ```rust
   let adapter = match self.chain_adapters.read().await.get(&chain_id) {
       Some(adapter) => adapter.clone(),
       None => {
           warn!("No adapter found for chain ID {}", chain_id);
           return (0.0, Some("No chain adapter found".to_string()));
       }
   };
   ```

# Lỗi trong module snipebot/src/tradelogic/common (cần được xử lý trong lần cập nhật tiếp theo)
- [FIXED][2024-10-21] Nhiều unused imports trong websocket.rs: StreamExt, SinkExt
- [FIXED][2024-10-21] Unused imports trong bridge_types/monitoring.rs: bail, Context, std::sync::Arc
- [FIXED][2024-10-21] Lỗi cấu trúc MonitorConfig không đúng fields trong bridge_types/monitoring.rs
- [FIXED][2024-10-21] Lỗi file trùng lặp trong common/src/api.rs và common/src/api/mod.rs
- [FIXED][2024-10-21] Unused variable connection trong network_integration/websocket.rs
- [FIXED][2024-10-21] Nhiều module không tìm thấy file trong common:
  - middleware
  - cache trong mpc/
  - signing trong mpc/
  - key_management trong mpc/
  - threshold trong mpc/
  - grpc trong network_integration/
  - http2 trong network_integration/
  - redis trong network_integration/
  - p2p trong network_integration/
  - concurrency trong performance/
  - cache trong performance/
  - optimization trong performance/
  - monitoring trong performance/
- [FIXED][2024-10-21] Thiếu module reqwest trong dependencies

# Tóm tắt các sửa đổi mới thực hiện ngày 2024-10-21

1. [FIXED][2024-10-21] **common/src/network_integration/websocket.rs**:
   - Xóa bỏ imports không sử dụng: StreamExt, SinkExt từ futures_util
   - Code hiện tại là stub implementation nên chỉ cần xóa bỏ imports không sử dụng để tránh cảnh báo từ clippy
   - Thêm _ vào trước biến connection không sử dụng

2. [FIXED][2024-10-21] **common/src/bridge_types/monitoring.rs**:
   - Xóa bỏ unused imports: bail, Context, Arc
   - Xóa bỏ các constants không cần thiết: DEFAULT_MAX_RETRIES, DEFAULT_RETRY_DELAY, DEFAULT_MONITOR_INTERVAL, DEFAULT_MAX_MONITOR_TIME
   - Thay thế e.context() bằng anyhow::anyhow!() để báo lỗi
   - Cải thiện error message formatting

3. [FIXED][2024-10-21] **common/src/bridge_types/types.rs**:
   - Cập nhật cấu trúc MonitorConfig để thống nhất với cách sử dụng trong monitoring.rs
   - Thay đổi fields:
     - initial_delay -> retry_delay: Duration
     - Cập nhật các unit test và default implementation

4. [FIXED][2024-10-21] **common/src/api.rs**:
   - Xóa bỏ file trùng lặp với common/src/api/mod.rs

5. [FIXED][2024-10-21] **Tạo các stub file cho các module thiếu**:
   - Tạo middleware/mod.rs với interface chuẩn cho middleware chain
   - Tạo middleware/auth.rs với AuthMiddleware implementation
   - Tạo mpc/cache.rs với MpcCacheService 
   - Tạo mpc/signing.rs với MpcSigningService và KeyService trait
   - Tạo mpc/key_management.rs với MpcKeyManagementService và KeyStore trait
   - Tạo mpc/threshold.rs với MpcThresholdService
   - Tạo network_integration/grpc.rs với GrpcIntegrationService
   - Tạo network_integration/http2.rs với Http2IntegrationService
   - Tạo network_integration/redis.rs với RedisIntegrationService
   - Tạo network_integration/p2p.rs với P2pIntegrationService
   - Tạo performance/concurrency.rs với ConcurrencyControlService
   - Tạo performance/cache.rs với CacheService
   - Tạo performance/optimization.rs với PerformanceOptimizationService
   - Tạo performance/monitoring.rs với MonitoringService

6. [FIXED][2024-10-21] **Cập nhật common/Cargo.toml**:
   - Thêm reqwest = { version = "0.11", features = ["json", "rustls-tls"] }
   - Thêm jsonwebtoken = "8.0" để hỗ trợ middleware/auth.rs

# Ghi chú:
- Các stub implementation chỉ là mẫu cơ bản để tránh lỗi biên dịch và cung cấp interface chuẩn. Cần được phát triển thêm trong các lần cập nhật tiếp theo.
- Một số module cần dependencies bổ sung và có thể cần thêm vào Cargo.toml trong tương lai khi triển khai chi tiết.
- Nên kiểm tra lại các dependency để đảm bảo tính nhất quán và không có xung đột.
