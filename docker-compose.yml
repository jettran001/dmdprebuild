version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: nginx-lb
    ports:
      - "80:80"
    volumes:
      - ./network/infra/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - node1
      - node2
      - node3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  node1:
    image: my-network-backend
    container_name: node1
    expose:
      - "8080"
      - "9001"
    ports:
      - "9001:9001"   # WebSocket
      - "8080:8080"   # HTTP API
    environment:
      - NODE_ID=node1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
      - ipfs
    deploy:
      mode: replicated
      replicas: 1

  node2:
    image: my-network-backend
    container_name: node2
    expose:
      - "8080"
      - "9001"
    ports:
      - "9001:9001"
      - "8080:8080"
    environment:
      - NODE_ID=node2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
      - ipfs
    deploy:
      mode: replicated
      replicas: 1

  node3:
    image: my-network-backend
    container_name: node3
    expose:
      - "8080"
      - "9001"
    ports:
      - "9001:9001"
      - "8080:8080"
    environment:
      - NODE_ID=node3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
      - ipfs
    deploy:
      mode: replicated
      replicas: 1

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: ipfs
    ports:
      - "5001:5001"   # API
      - "8081:8080"   # Gateway
      - "4001:4001"   # Swarm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/v0/version"]
      interval: 30s
      timeout: 10s
      retries: 3

  network:
    build: ./network
    container_name: network
    ports:
      - "9001:9001"
      - "50051:50051"
      - "6379:6379"
      - "9092:9092"
      - "1883:1883"
      - "9100:9100" # Prometheus node-exporter
    environment:
      - RUST_LOG=info
    # Nếu app có endpoint /metrics, expose thêm port nếu cần
    # depends_on:
    #   - prometheus

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      - network
      - node-exporter

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    restart: unless-stopped
    depends_on:
      - prometheus

# Auto scaling: To scale nodes, use 'docker-compose up --scale node1=3' or set deploy.replicas if using Docker Swarm.
# For Kubernetes, use HorizontalPodAutoscaler:
# apiVersion: autoscaling/v2
# kind: HorizontalPodAutoscaler
# metadata:
#   name: network-api-hpa
# spec:
#   scaleTargetRef:
#     apiVersion: apps/v1
#     kind: Deployment
#     name: network-api
#   minReplicas: 2
#   maxReplicas: 10
#   metrics:
#     - type: Resource
#       resource:
#         name: cpu
#         target:
#           type: Utilization
#           averageUtilization: 60
# Healthcheck: Each node exposes /health endpoint for liveness check.
# Redis and IPFS are real services, available to all backend nodes.

# WebSocket: Each node exposes 9001, mapped to host for direct access or via Nginx.
# Redis: 6379, IPFS: 5001 (API), 8081 (Gateway), 4001 (Swarm)

# =========================
# HƯỚNG DẪN AUTO-SCALING DOCKER SWARM
# Để scale node1 lên 3 instance:
#   docker stack deploy -c docker-compose.yml mystack
#   docker service scale mystack_node1=3
# Hoặc chỉnh sửa replicas trong deploy cho node1, node2, node3.
# ========================= 