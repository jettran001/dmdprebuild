// .rustguard - Quy tắc chuẩn hóa & bảo mật cho smart contract Rust (Near/Solana)
// Version: 1.0.0
// Ngày cập nhật: 2024-07-20

/**
 * =======================================================
 * I. NGUYÊN TẮC TÍCH HỢP LAYERZERO/WORMHOLE (BẮT BUỘC)
 * =======================================================
 * - KHÔNG tự code lại các logic đã được LayerZero/Wormhole enforce: trustedRemote validation, endpoint validation, replay protection, message routing, message ordering, endpoint ownership, cross-chain security.
 * - Chỉ sử dụng các API, endpoint, trustedRemote, và message flow đúng chuẩn LayerZero/Wormhole.
 * - Không override hoặc can thiệp vào các cơ chế bảo mật của LayerZero/Wormhole.
 * - Mọi logic bảo mật cross-chain đã được protocol đảm bảo ở tầng nền tảng.
 */

/**
 * =======================================================
 * II. QUY TẮC BỔ SUNG CHO LOGIC BRIDGE (BẮT BUỘC)
 * =======================================================
 */

1. LIMIT, FEE, RATE:
   - Chuẩn hóa cấu trúc lưu trữ limit, fee, rate (BridgeConfig hoặc tương đương).
   - Mọi giao dịch bridge phải kiểm tra limit/fee/rate ở tầng logic bridge (không phụ thuộc vào LayerZero/Wormhole).
   - Có event/log khi thay đổi limit/fee/rate.

2. LOGIC EVENT:
   - Chuẩn hóa log cho các thao tác logic: bridge, unwrap, rescue, emergency, failed, retry.
   - Log phải có bridgeId, sender, receiver, amount, timestamp, status.
   - Không cần log lại các event đã được LayerZero/Wormhole emit.

3. TIMELOCK:
   - Bắt buộc cho các thao tác ngoài phạm vi LayerZero/Wormhole: rút tiền, rescue, cập nhật fee/limit.
   - Timelock: delay tối thiểu 24h cho các thao tác nhạy cảm.
   - Lưu thông tin requester, chỉ requester hoặc owner mới được thực thi/cancel.
   - Log khi bắt đầu và hoàn thành thao tác.

4. RESCUE, STUCK, EMERGENCY (NỘI BỘ):
   - Chỉ áp dụng cho các trường hợp token stuck do logic nội bộ (không áp dụng cho message stuck ở LayerZero/Wormhole).
   - Có timeout, limit, quyền kiểm soát rõ ràng.
   - Log cho mọi thao tác rescue, stuck, emergency.

5. TESTING & AUDIT:
   - Đảm bảo test coverage cao cho phần logic bridge (limit, fee, event, rescue, v.v.).
   - Không cần test lại các tính năng đã được LayerZero/Wormhole audit.

6. DOCUMENTATION:
   - Mọi thay đổi logic bridge phải cập nhật vào tài liệu kỹ thuật, .rustguard, .bugs.
   - Ghi rõ phạm vi trách nhiệm giữa LayerZero/Wormhole (protocol) và logic bridge (application).

/**
 * =======================================================
 * III. QUY TẮC CHUẨN HÓA CHUNG
 * =======================================================
 */

1. PHIÊN BẢN RUST:
   - Bắt buộc sử dụng toolchain stable mới nhất (hoặc version được chỉ định trong manifest).
   - Không sử dụng nightly feature trừ khi thực sự cần thiết và đã được audit.

2. THƯ VIỆN TIÊU CHUẨN:
   - Ưu tiên sử dụng các thư viện chính thức: solana-program, spl-token, anyhow, thiserror, serde, log/tracing.
   - Không thêm thư viện bên ngoài chưa được kiểm tra an ninh.

3. CẤU TRÚC THƯ MỤC & FILE:
   - Đặt các trait vào thư mục riêng (./traits/ hoặc subdirectory tương ứng).
   - Đặt các struct chính vào file/module riêng.
   - Tên file phải khớp với tên struct/trait chính trong file.
   - Các contract liên quan phải được tổ chức trong cùng một thư mục.

4. ĐẶT TÊN & PHONG CÁCH CODE:
   - Sử dụng tiếng Anh cho tất cả code, bao gồm comment.
   - Struct/Enum: PascalCase (e.g. BridgeRequest)
   - Functions: snake_case (e.g. bridge_to_near)
   - Variables: snake_case (e.g. token_amount)
   - Constants: SCREAMING_SNAKE_CASE (e.g. MAX_SUPPLY)
   - Log/Event: PascalCase (e.g. BridgeInitiated)
   - Error: PascalCase (e.g. BridgeError)
   - Module: snake_case

5. TỔ CHỨC FILE:
   - Thứ tự: Doc comment, Imports, Constants, Struct/Enum, Trait, Implementation, Functions, Tests.
   - Comment chức năng và tham số cho mỗi function.
   - Các đoạn code liên quan nên được nhóm lại với nhau.

/**
 * =======================================================
 * IV. BẢO MẬT
 * =======================================================
 */

1. KIỂM SOÁT QUYỀN TRUY CẬP:
   - Luôn sử dụng kiểm tra owner/admin cho các hàm quan trọng (is_admin, mint_authority).
   - Với các hàm rút tiền/token, rescue, cập nhật limit/fee, bắt buộc dùng timelock.
   - Không sử dụng unwrap/expect cho các Result/Option, luôn xử lý lỗi rõ ràng.
   - Không sử dụng các pattern không an toàn (unsafe, transmute, ...).

2. TRÁNH FRONT-RUNNING & REENTRANCY:
   - Tuân thủ quy tắc CEI (Check-Effects-Interactions).
   - Không gọi external program trước khi cập nhật state nội bộ.
   - Với các hàm chuyển token, luôn kiểm tra số dư và trạng thái trước khi thực hiện.

3. KIỂM TRA ĐẦU VÀO:
   - Kiểm tra zero address trước khi lưu trữ hoặc chuyển token.
   - Kiểm tra số lượng và confirm số lượng đủ trước khi chuyển.
   - Kiểm tra limit, fee, rate trước khi bridge.
   - Kiểm tra quyền owner/admin trước khi thực hiện thao tác nhạy cảm.

/**
 * =======================================================
 * V. LOGGING & ERROR HANDLING
 * =======================================================
 */

1. LOGGING:
   - Sử dụng msg!() hoặc log/tracing cho mọi thao tác quan trọng, đặc biệt là lỗi.
   - Log phải có mã lỗi (enum), trạng thái, tham số liên quan.
   - Không log thông tin nhạy cảm (private key, seed, ...).

2. ERROR HANDLING:
   - Định nghĩa enum mã lỗi (e.g. BridgeErrorCode).
   - Không unwrap/expect trực tiếp, luôn dùng match và trả về lỗi rõ ràng.
   - Với external call (invoke, client.get_account, ...), luôn catch lỗi và log chi tiết.
   - Mapping error code sang message ở client/off-chain nếu cần.

/**
 * =======================================================
 * VI. CẤU TRÚC DỮ LIỆU & GAS OPTIMIZATION
 * =======================================================
 */

1. GIỚI HẠN KÍCH THƯỚC:
   - Các trường dữ liệu biến đổi (e.g. message, event) phải giới hạn độ dài (ví dụ: 256 ký tự).
   - Nếu vượt quá, cắt bớt và log warning.

2. VÒNG LẶP & XỬ LÝ HÀNG LOẠT:
   - Trong các hàm xử lý hàng loạt (retry, cleanup, ...), giới hạn số lượng phần tử mỗi lần (ví dụ: tối đa 10).
   - Luôn kiểm tra overflow khi tăng biến đếm.

3. SỬ DỤNG TÀI NGUYÊN:
   - Tránh lưu trữ dữ liệu không cần thiết on-chain.
   - Ưu tiên sử dụng array cho số lượng nhỏ, mapping cho số lượng lớn.
   - Không lặp qua array lớn trong các hàm view/on-chain logic.

/**
 * =======================================================
 * VII. TESTING & DEPLOYMENT
 * =======================================================
 */

1. YÊU CẦU TESTING:
   - Bắt buộc test các hàm critical (bridge, rescue, emergency, fee, limit).
   - Đảm bảo test coverage cao (>80%) cho logic bridge.
   - Test các trường hợp biên (edge cases) và các kịch bản tấn công.

2. DEPLOYMENT:
   - Kiểm tra kết quả deployment sau mỗi bước.
   - Chuyển quyền sở hữu của tất cả các contract về admin sau khi deploy.
   - Đảm bảo upgrade logic tuân thủ chuẩn Solana (không enforce proxy pattern như EVM).

/**
 * =======================================================
 * VIII. REVIEW & DOCUMENTATION
 * =======================================================
 */

1. REVIEW:
   - Kiểm tra tuân thủ tất cả quy tắc trong tài liệu này.
   - Kiểm tra khả năng bị tấn công reentrancy, kiểm soát truy cập, xử lý lỗi, log, limit, fee.
   - Review code trước khi merge vào nhánh chính, chạy static analyzer (clippy, cargo audit).

2. DOCUMENTATION:
   - Mọi thay đổi phải được cập nhật vào tài liệu kỹ thuật.
   - Mọi lỗi đã fix phải được cập nhật vào .bugs.
   - Mọi quy tắc mới phải được cập nhật vào .rustguard. 