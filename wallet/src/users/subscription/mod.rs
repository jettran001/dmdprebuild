//! üß≠ Module qu·∫£n l√Ω ƒëƒÉng k√Ω v√† g√≥i d·ªãch v·ª• (subscription)
//! 
//! Module n√†y cung c·∫•p c√°c ch·ª©c nƒÉng ƒë·ªÉ qu·∫£n l√Ω ƒëƒÉng k√Ω v√† c√°c g√≥i d·ªãch v·ª• (Free, Premium, VIP)
//! trong h·ªá th·ªëng DiamondChain. Tri·ªÉn khai c√°c t√≠nh nƒÉng theo m√¥ h√¨nh:
//! - manager: SubscriptionManager ƒëi·ªÅu ph·ªëi t·ªïng th·ªÉ
//! - user_subscription: Th√¥ng tin ƒëƒÉng k√Ω c·ªßa ng∆∞·ªùi d√πng
//! - types: ƒê·ªãnh nghƒ©a c√°c ki·ªÉu d·ªØ li·ªáu
//! - payment: X·ª≠ l√Ω thanh to√°n
//! - staking: Qu·∫£n l√Ω staking DMD token
//! - nft: Ki·ªÉm tra s·ªü h·ªØu NFT
//! - auto_trade: Qu·∫£n l√Ω th·ªùi gian auto-trade
//! - constants: C√°c h·∫±ng s·ªë
//! - events: X·ª≠ l√Ω s·ª± ki·ªán
//! - utils: C√°c h√†m ti·ªán √≠ch
//! - tests: Ki·ªÉm th·ª≠

// External imports
use chrono::{DateTime, Utc};
use thiserror::Error;
use std::str::FromStr;
use std::fmt;

// Standard library imports
use std::collections::HashMap;

// Internal imports
use crate::users::free_user::FreeUserManager;
use crate::error::WalletError;

// Modules
mod manager;
mod user_subscription;
mod types;
mod payment;
mod staking;
mod nft;
mod auto_trade;
mod constants;
mod events;
mod utils;
#[cfg(test)]
mod tests;

// Re-exports
pub use manager::SubscriptionManager;
pub use user_subscription::UserSubscription;
pub use types::{SubscriptionType, SubscriptionStatus, Feature, PaymentToken, NonNftVipStatus};
pub use staking::{StakingManager, TokenStake, StakeStatus};
pub use nft::{NftInfo, VipNftInfo};
pub use events::{SubscriptionEvent, EventType, EventEmitter};
pub use auto_trade::{AutoTradeManager, AutoTradeStatus, AutoTradeUsage};
pub use constants::*;

/// C√°c l·ªói li√™n quan ƒë·∫øn module subscription.
///
/// Enum n√†y ƒë·ªãnh nghƒ©a c√°c lo·∫°i l·ªói c√≥ th·ªÉ x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω
/// c√°c ch·ª©c nƒÉng li√™n quan ƒë·∫øn subscription trong h·ªá th·ªëng.
#[derive(Error, Debug)]
pub enum SubscriptionError {
    /// L·ªói khi kh√¥ng t√¨m th·∫•y subscription c·ªßa user.
    ///
    /// X·∫£y ra khi th·ª±c hi·ªán c√°c thao t√°c tr√™n m·ªôt subscription kh√¥ng t·ªìn t·∫°i.
    /// Th∆∞·ªùng g·∫∑p khi c·ªë g·∫Øng truy c·∫≠p th√¥ng tin subscription c·ªßa m·ªôt ng∆∞·ªùi d√πng
    /// ch∆∞a ƒëƒÉng k√Ω ho·∫∑c khi user_id kh√¥ng t·ªìn t·∫°i.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::SubscriptionError;
    /// let error = SubscriptionError::NotFound("user123".to_string());
    /// assert!(error.to_string().contains("user123"));
    /// ```
    #[error("Kh√¥ng t√¨m th·∫•y subscription cho ng∆∞·ªùi d√πng: {0}")]
    NotFound(String),
    
    /// L·ªói khi kh√¥ng ƒë·ªß quy·ªÅn cho m·ªôt thao t√°c n√†o ƒë√≥.
    ///
    /// X·∫£y ra khi ng∆∞·ªùi d√πng c·ªë g·∫Øng s·ª≠ d·ª•ng m·ªôt t√≠nh nƒÉng kh√¥ng ƒë∆∞·ª£c ph√©p
    /// v·ªõi lo·∫°i subscription hi·ªán t·∫°i c·ªßa h·ªç.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::SubscriptionError;
    /// let error = SubscriptionError::InsufficientPermission("Auto-trade y√™u c·∫ßu g√≥i Premium".to_string());
    /// ```
    #[error("Kh√¥ng ƒë·ªß quy·ªÅn: {0}")]
    InsufficientPermission(String),
    
    /// L·ªói khi subscription ƒë√£ h·∫øt h·∫°n.
    ///
    /// X·∫£y ra khi c·ªë g·∫Øng s·ª≠ d·ª•ng m·ªôt t√≠nh nƒÉng v·ªõi subscription ƒë√£ h·∫øt h·∫°n,
    /// nh∆∞ng ch∆∞a ƒë∆∞·ª£c gia h·∫°n ho·∫∑c n√¢ng c·∫•p.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::{SubscriptionError, SubscriptionType};
    /// let error = SubscriptionError::Expired(SubscriptionType::Premium, "2023-01-01".to_string());
    /// ```
    #[error("Subscription {0} ƒë√£ h·∫øt h·∫°n v√†o {1}")]
    Expired(SubscriptionType, String),
    
    /// L·ªói khi th·ª±c hi·ªán thanh to√°n cho subscription.
    ///
    /// Bao g·ªìm c√°c l·ªói nh∆∞ kh√¥ng ƒë·ªß s·ªë d∆∞, giao d·ªãch th·∫•t b·∫°i,
    /// token kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£, v.v.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::SubscriptionError;
    /// let error = SubscriptionError::PaymentError("Kh√¥ng ƒë·ªß s·ªë d∆∞ USDC".to_string());
    /// ```
    #[error("L·ªói thanh to√°n: {0}")]
    PaymentError(String),
    
    /// L·ªói khi th·ª±c hi·ªán thao t√°c v·ªõi NFT.
    ///
    /// X·∫£y ra khi c√≥ v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn vi·ªác x√°c minh s·ªü h·ªØu NFT,
    /// nh∆∞ kh√¥ng t√¨m th·∫•y NFT, NFT ƒë√£ b·ªã chuy·ªÉn ƒëi, v.v.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::SubscriptionError;
    /// let error = SubscriptionError::NftError("Kh√¥ng s·ªü h·ªØu NFT VIP".to_string());
    /// ```
    #[error("L·ªói NFT: {0}")]
    NftError(String),
    
    /// L·ªói khi th·ª±c hi·ªán thao t√°c v·ªõi staking.
    ///
    /// X·∫£y ra khi c√≥ v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn vi·ªác stake/unstake token,
    /// nh∆∞ kh√¥ng ƒë·ªß token ƒë·ªÉ stake, l·ªói khi t∆∞∆°ng t√°c v·ªõi h·ª£p ƒë·ªìng, v.v.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::SubscriptionError;
    /// let error = SubscriptionError::StakingError("Kh√¥ng th·ªÉ unstake token tr∆∞·ªõc th·ªùi h·∫°n".to_string());
    /// ```
    #[error("L·ªói staking: {0}")]
    StakingError(String),
    
    /// L·ªói khi th·ª±c hi·ªán chuy·ªÉn ƒë·ªïi gi·ªØa c√°c lo·∫°i subscription.
    ///
    /// X·∫£y ra khi c√≥ v·∫•n ƒë·ªÅ trong qu√° tr√¨nh n√¢ng c·∫•p ho·∫∑c h·∫° c·∫•p subscription,
    /// nh∆∞ chuy·ªÉn ƒë·ªïi kh√¥ng ƒë∆∞·ª£c ph√©p, thi·∫øu ƒëi·ªÅu ki·ªán ti√™n quy·∫øt, v.v.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::{SubscriptionError, SubscriptionType};
    /// let error = SubscriptionError::ConversionError(
    ///     SubscriptionType::VIP,
    ///     SubscriptionType::Free,
    ///     "Kh√¥ng th·ªÉ h·∫° c·∫•p tr·ª±c ti·∫øp t·ª´ VIP xu·ªëng Free".to_string()
    /// );
    /// ```
    #[error("L·ªói khi chuy·ªÉn ƒë·ªïi t·ª´ {0} sang {1}: {2}")]
    ConversionError(SubscriptionType, SubscriptionType, String),
    
    /// L·ªói khi subscription ƒë√£ t·ªìn t·∫°i.
    ///
    /// X·∫£y ra khi c·ªë g·∫Øng t·∫°o m·ªôt subscription m·ªõi cho m·ªôt ng∆∞·ªùi d√πng
    /// ƒë√£ c√≥ subscription ho·∫°t ƒë·ªông.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::{SubscriptionError, SubscriptionType};
    /// let error = SubscriptionError::AlreadyExists(SubscriptionType::Premium);
    /// ```
    #[error("Subscription {0} ƒë√£ t·ªìn t·∫°i")]
    AlreadyExists(SubscriptionType),
    
    /// L·ªói khi x·∫£y ra l·ªói c∆° s·ªü d·ªØ li·ªáu.
    ///
    /// X·∫£y ra khi c√≥ v·∫•n ƒë·ªÅ khi truy c·∫≠p ho·∫∑c c·∫≠p nh·∫≠t d·ªØ li·ªáu
    /// subscription trong c∆° s·ªü d·ªØ li·ªáu.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::SubscriptionError;
    /// let error = SubscriptionError::DatabaseError("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database".to_string());
    /// ```
    #[error("L·ªói c∆° s·ªü d·ªØ li·ªáu: {0}")]
    DatabaseError(String),
    
    /// L·ªói khi x·∫£y ra xung ƒë·ªôt trong ƒë·ªìng b·ªô h√≥a d·ªØ li·ªáu.
    ///
    /// X·∫£y ra khi c√≥ xung ƒë·ªôt khi nhi·ªÅu thread c√πng c·∫≠p nh·∫≠t m·ªôt subscription,
    /// ho·∫∑c khi c√≥ race condition trong qu√° tr√¨nh x·ª≠ l√Ω.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::SubscriptionError;
    /// let error = SubscriptionError::SyncError("Xung ƒë·ªôt khi c·∫≠p nh·∫≠t subscription".to_string());
    /// ```
    #[error("L·ªói ƒë·ªìng b·ªô h√≥a: {0}")]
    SyncError(String),
    
    /// L·ªói khi c√≥ v·∫•n ƒë·ªÅ v·ªõi t√†i kho·∫£n ng∆∞·ªùi d√πng.
    ///
    /// X·∫£y ra khi c√≥ v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn t√†i kho·∫£n ng∆∞·ªùi d√πng,
    /// nh∆∞ t√†i kho·∫£n b·ªã kh√≥a, ch∆∞a x√°c minh, v.v.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::SubscriptionError;
    /// let error = SubscriptionError::AccountError("T√†i kho·∫£n ƒë√£ b·ªã kh√≥a".to_string());
    /// ```
    #[error("L·ªói t√†i kho·∫£n: {0}")]
    AccountError(String),
    
    /// L·ªói khi ƒë·ªëi s·ªë kh√¥ng h·ª£p l·ªá.
    ///
    /// X·∫£y ra khi cung c·∫•p c√°c tham s·ªë kh√¥ng h·ª£p l·ªá cho c√°c h√†m
    /// trong module subscription.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::SubscriptionError;
    /// let error = SubscriptionError::InvalidArgument("duration_days ph·∫£i l·ªõn h∆°n 0".to_string());
    /// ```
    #[error("ƒê·ªëi s·ªë kh√¥ng h·ª£p l·ªá: {0}")]
    InvalidArgument(String),
    
    /// C√°c l·ªói kh√°c kh√¥ng thu·ªôc c√°c lo·∫°i tr√™n.
    ///
    /// D√πng cho c√°c tr∆∞·ªùng h·ª£p l·ªói ch∆∞a ƒë∆∞·ª£c ph√¢n lo·∫°i c·ª• th·ªÉ.
    ///
    /// # Examples
    /// ```
    /// use wallet::users::subscription::SubscriptionError;
    /// let error = SubscriptionError::Other("L·ªói kh√¥ng x√°c ƒë·ªãnh".to_string());
    /// ```
    #[error("L·ªói kh√°c: {0}")]
    Other(String),
}

/// Chuy·ªÉn ƒë·ªïi t·ª´ SubscriptionError sang WalletError.
///
/// Trait implementation n√†y cho ph√©p chuy·ªÉn ƒë·ªïi t·ª´ SubscriptionError sang WalletError,
/// gi√∫p ƒë·∫£m b·∫£o x·ª≠ l√Ω l·ªói nh·∫•t qu√°n trong to√†n b·ªô h·ªá th·ªëng.
impl From<SubscriptionError> for WalletError {
    fn from(error: SubscriptionError) -> Self {
        match error {
            SubscriptionError::NotFound(msg) => WalletError::NotFound(msg),
            SubscriptionError::InsufficientPermission(msg) => WalletError::AccessDenied(format!("Kh√¥ng ƒë·ªß quy·ªÅn: {}", msg)),
            SubscriptionError::Expired(sub_type, date) => WalletError::Other(format!("Subscription {:?} ƒë√£ h·∫øt h·∫°n v√†o {}", sub_type, date)),
            SubscriptionError::PaymentError(msg) => WalletError::Other(format!("L·ªói thanh to√°n subscription: {}", msg)),
            SubscriptionError::NftError(msg) => WalletError::Other(format!("L·ªói NFT subscription: {}", msg)),
            SubscriptionError::StakingError(msg) => WalletError::Other(format!("L·ªói staking subscription: {}", msg)),
            SubscriptionError::ConversionError(from, to, msg) => WalletError::InvalidOperation(format!("Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi t·ª´ {:?} sang {:?}: {}", from, to, msg)),
            SubscriptionError::AlreadyExists(sub_type) => WalletError::AlreadyExists(format!("Subscription {:?} ƒë√£ t·ªìn t·∫°i", sub_type)),
            SubscriptionError::DatabaseError(msg) => WalletError::DatabaseError(msg),
            SubscriptionError::SyncError(msg) => WalletError::Other(format!("L·ªói ƒë·ªìng b·ªô h√≥a subscription: {}", msg)),
            SubscriptionError::AccountError(msg) => WalletError::Other(format!("L·ªói t√†i kho·∫£n: {}", msg)),
            SubscriptionError::InvalidArgument(msg) => WalletError::Other(format!("ƒê·ªëi s·ªë kh√¥ng h·ª£p l·ªá: {}", msg)),
            SubscriptionError::Other(msg) => WalletError::Other(format!("L·ªói subscription: {}", msg)),
        }
    }
}

/// Ki·ªÉm tra quy·ªÅn truy c·∫≠p t√≠nh nƒÉng d·ª±a tr√™n lo·∫°i ng∆∞·ªùi d√πng v√† t√≠nh nƒÉng.
///
/// H√†m n√†y ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ quy·ªÅn s·ª≠ d·ª•ng t√≠nh nƒÉng c·ª• th·ªÉ hay kh√¥ng
/// d·ª±a tr√™n lo·∫°i subscription v√† tr·∫°ng th√°i hi·ªán t·∫°i.
///
/// # Arguments
/// * `user` - Tham chi·∫øu ƒë·∫øn ƒë·ªëi t∆∞·ª£ng User c·∫ßn ki·ªÉm tra
/// * `feature` - T√≠nh nƒÉng c·∫ßn ki·ªÉm tra quy·ªÅn truy c·∫≠p
///
/// # Returns
/// `bool` - `true` n·∫øu ng∆∞·ªùi d√πng c√≥ quy·ªÅn truy c·∫≠p, ng∆∞·ª£c l·∫°i l√† `false`
///
/// # Examples
/// ```
/// use wallet::users::subscription::{has_feature_access, Feature};
/// use wallet::users::User;
///
/// let user = get_user(); // Gi·∫£ s·ª≠ h√†m n√†y t·ªìn t·∫°i
/// if has_feature_access(&user, Feature::AutoTrade) {
///     // Cho ph√©p s·ª≠ d·ª•ng t√≠nh nƒÉng auto trade
/// } else {
///     // Hi·ªÉn th·ªã th√¥ng b√°o n√¢ng c·∫•p
/// }
/// ```
pub fn has_feature_access(user: &crate::users::User, feature: Feature) -> bool {
    // Ki·ªÉm tra user c√≥ h·ª£p l·ªá kh√¥ng
    if user.status != crate::users::UserStatus::Active {
        // Ng∆∞·ªùi d√πng kh√¥ng active th√¨ kh√¥ng c√≥ quy·ªÅn truy c·∫≠p c√°c t√≠nh nƒÉng cao c·∫•p
        return match feature {
            Feature::RealTimeAlerts => true, // T√≠nh nƒÉng mi·ªÖn ph√≠ cho t·∫•t c·∫£
            _ => false,
        };
    }
    
    // Ki·ªÉm tra subscription c√≥ t·ªìn t·∫°i v√† c√≤n h·∫°n kh√¥ng
    match &user.subscription {
        Some(subscription) => {
            if subscription.is_active() {
                // Ki·ªÉm tra quy·ªÅn truy c·∫≠p d·ª±a tr√™n lo·∫°i g√≥i
                subscription.has_feature(feature)
            } else {
                // G√≥i ƒë√£ h·∫øt h·∫°n, ch·ªâ c√≥ c√°c t√≠nh nƒÉng mi·ªÖn ph√≠
                match feature {
                    Feature::RealTimeAlerts => true,
                    _ => false,
                }
            }
        },
        None => {
            // Ng∆∞·ªùi d√πng kh√¥ng c√≥ g√≥i ƒëƒÉng k√Ω, ch·ªâ c√≥ c√°c t√≠nh nƒÉng mi·ªÖn ph√≠
            match feature {
                Feature::RealTimeAlerts => true,
                _ => false,
            }
        }
    }
}

/// Ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëƒÉng k√Ω theo th·ªùi gian
/// 
/// H√†m n√†y c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëƒÉng k√Ω d·ª±a tr√™n th·ªùi gian hi·ªán t·∫°i, ki·ªÉm tra
/// h·∫°n s·ª≠ d·ª•ng v√† c√°c y·∫øu t·ªë kh√°c ƒë·ªÉ ƒë·∫£m b·∫£o tr·∫°ng th√°i ƒëƒÉng k√Ω lu√¥n ch√≠nh x√°c.
/// 
/// # Arguments
/// * `user` - Tham chi·∫øu ƒë·∫øn ƒë·ªëi t∆∞·ª£ng User c·∫ßn c·∫≠p nh·∫≠t
/// 
/// # Returns
/// * `Ok(())` - N·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng
/// * `Err(AppError)` - N·∫øu c√≥ l·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t
///
/// # Examples
/// ```
/// use wallet::users::User;
/// use wallet::users::subscription::refresh_subscription_status;
///
/// // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëƒÉng k√Ω cho ng∆∞·ªùi d√πng
/// let mut user = get_user(); // Gi·∫£ s·ª≠ h√†m n√†y t·ªìn t·∫°i
/// refresh_subscription_status(&mut user).await?;
/// ```
pub async fn refresh_subscription_status(user: &mut crate::users::User) -> Result<(), WalletError> {
    let now = Utc::now();
    
    if let Some(subscription) = &mut user.subscription {
        // Ki·ªÉm tra h·∫øt h·∫°n
        if subscription.end_date < now && subscription.status != SubscriptionStatus::Expired {
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh h·∫øt h·∫°n
            subscription.status = SubscriptionStatus::Expired;
            
            // TODO: G·ª≠i th√¥ng b√°o cho ng∆∞·ªùi d√πng
            
            // TODO: L∆∞u thay ƒë·ªïi v√†o database
        }
        
        // Ki·ªÉm tra s·∫Øp h·∫øt h·∫°n
        if subscription.status == SubscriptionStatus::Active {
            let days_remaining = (subscription.end_date - now).num_days();
            
            if days_remaining <= 3 && !subscription.is_expiry_notified {
                // ƒê√°nh d·∫•u ƒë√£ th√¥ng b√°o
                subscription.is_expiry_notified = true;
                
                // TODO: G·ª≠i th√¥ng b√°o s·∫Øp h·∫øt h·∫°n
                
                // TODO: L∆∞u thay ƒë·ªïi v√†o database
            }
        }
    }
    
    Ok(())
} 