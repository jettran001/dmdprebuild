//! ƒê·ªãnh nghƒ©a c√°c ki·ªÉu d·ªØ li·ªáu cho ph√¢n t√≠ch token

// ƒê·ªãnh nghƒ©a c√°c ng∆∞·ª°ng v√† ti√™u ch√≠ ƒë√°nh gi√°
// ƒê∆∞a c√°c ng∆∞·ª°ng n√†y v√†o h·∫±ng s·ªë ƒë·ªÉ d·ªÖ qu·∫£n l√Ω v√† ƒëi·ªÅu ch·ªânh
const AUDIT_SCORE_DANGEROUS: f64 = 60.0;
const AUDIT_SCORE_SAFE: f64 = 80.0;
const TAX_DANGEROUS: f64 = 10.0;
const TAX_MODERATE: f64 = 5.0;
const LIQUIDITY_DANGEROUS: f64 = 1000.0;
const LIQUIDITY_MODERATE: f64 = 3000.0;
const LIQUIDITY_SAFE: f64 = 10000.0;

// Import TokenIssue t·ª´ tradelogic/common/types.rs ƒë·ªÉ tr√°nh ƒë·ªãnh nghƒ©a tr√πng l·∫∑p
use crate::tradelogic::common::types::TokenIssue;

#[derive(Debug, Clone)]
pub struct TokenStatus {
    /// ƒêi·ªÉm audit, gi√° tr·ªã t·ª´ 0 ƒë·∫øn 100.
    pub audit_score: f64,
    /// Thu·∫ø mua, t√≠nh theo ph·∫ßn trƒÉm.
    pub tax_buy: f64,
    /// Thu·∫ø b√°n, t√≠nh theo ph·∫ßn trƒÉm.
    pub tax_sell: f64,
    /// Gi√° tr·ªã thanh kho·∫£n c·ªßa pool, t√≠nh b·∫±ng USD.
    pub liquidity_pool: f64,
    /// Smart contract ƒë√£ ƒë∆∞·ª£c verified hay ch∆∞a.
    pub contract_verified: bool,
    /// Thanh kho·∫£n ƒë√£ ƒë∆∞·ª£c kh√≥a hay ch∆∞a.
    pub pool_locked: bool,
    /// C√≥ mint v√¥ h·∫°n hay kh√¥ng.
    pub mint_infinite: bool,
    /// C√≥ lock sell (kh√¥ng th·ªÉ b√°n) hay kh√¥ng.
    pub lock_sell: bool,
    /// C√≥ ph·∫£i honeypot (mua ƒë∆∞·ª£c nh∆∞ng kh√¥ng b√°n ƒë∆∞·ª£c) hay kh√¥ng.
    pub honeypot: bool,
    /// C√≥ rebate gi·∫£ m·∫°o (tr·∫£ l·∫°i token gi·∫£) hay kh√¥ng.
    pub rebate: bool,
    /// C√≥ h√†m pause() cho ph√©p t·∫°m d·ª´ng giao d·ªãch hay kh√¥ng.
    pub pausable: bool,
    /// C√≥ h√†m blacklistAddress() ƒë·ªÉ ch·∫∑n v√≠ ng∆∞·ªùi d√πng hay kh√¥ng.
    pub blacklist: bool,
    /// Ch·ªß s·ªü h·ªØu ·∫©n danh ho·∫∑c contract proxy kh√¥ng r√µ r√†ng.
    pub hidden_ownership: bool,
    /// T·ª∑ l·ªá s·ªü h·ªØu cao (>50% token n·∫±m trong 1-2 v√≠).
    pub high_ownership_concentration: bool,
    /// Gi·∫£ m·∫°o t·ª´ b·ªè quy·ªÅn s·ªü h·ªØu nh∆∞ng v·∫´n gi·ªØ quy·ªÅn qua backdoor.
    pub fake_renounced_ownership: bool,
    /// Thanh kho·∫£n th·∫•p (< $1,000).
    pub low_liquidity: bool,
    /// H√†m transfer() t√πy ch·ªânh ƒë√°ng ng·ªù (c√≥ th·ªÉ ƒë√°nh c·∫Øp token).
    pub suspicious_transfer_functions: bool,
}

impl TokenStatus {
    /// T·∫°o m·ªõi TokenStatus v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
    pub fn new() -> Self {
        Self {
            audit_score: 0.0,
            tax_buy: 0.0,
            tax_sell: 0.0,
            liquidity_pool: 0.0,
            contract_verified: false,
            pool_locked: false,
            mint_infinite: false,
            lock_sell: false,
            honeypot: false,
            rebate: false,
            pausable: false,
            blacklist: false,
            hidden_ownership: false,
            high_ownership_concentration: false,
            fake_renounced_ownership: false,
            low_liquidity: false,
            suspicious_transfer_functions: false,
        }
    }
    
    /// T·∫°o m·ªõi TokenStatus v·ªõi c√°c gi√° tr·ªã c·ª• th·ªÉ
    pub fn with_values(
        audit_score: f64, 
        tax_buy: f64, 
        tax_sell: f64,
        liquidity_pool: f64,
        contract_verified: bool,
        pool_locked: bool,
    ) -> Self {
        Self {
            audit_score,
            tax_buy,
            tax_sell,
            liquidity_pool,
            contract_verified,
            pool_locked,
            mint_infinite: false,
            lock_sell: false,
            honeypot: false,
            rebate: false,
            pausable: false,
            blacklist: false,
            hidden_ownership: false,
            high_ownership_concentration: false,
            fake_renounced_ownership: false,
            low_liquidity: liquidity_pool < LIQUIDITY_DANGEROUS,
            suspicious_transfer_functions: false,
        }
    }
}

/// C√°c m·ª©c ƒë·ªô tr·∫°ng th√°i c·ªßa token.
#[derive(Debug, Clone, PartialEq)]
pub enum TokenSafety {
    /// Nguy hi·ªÉm (üî¥): Token c√≥ r·ªßi ro cao, n√™n tr√°nh.
    Dangerous,
    /// Trung b√¨nh (üü°): Token ch·∫•p nh·∫≠n ƒë∆∞·ª£c nh∆∞ng c·∫ßn th·∫≠n tr·ªçng.
    Moderate,
    /// T·ªët (üü¢): Token an to√†n, ƒë√°ng tin c·∫≠y.
    Safe,
}

/// M·ª©c ƒë·ªô nghi√™m tr·ªçng c·ªßa v·∫•n ƒë·ªÅ
#[derive(Debug, Clone, PartialEq)]
pub enum IssueSeverity {
    Critical,
    High,
    Medium,
    Low,
}

/// ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông giao d·ªãch
#[derive(Debug, Clone, PartialEq)]
pub enum TradeRecommendation {
    Avoid,
    ProceedWithCaution(String),
    SafeToProceed,
}

/// Th√¥ng tin v·ªÅ contract c·ªßa token, ƒë∆∞·ª£c s·ª≠ d·ª•ng cho ph√¢n t√≠ch n√¢ng cao
#[derive(Debug, Clone)]
pub struct ContractInfo {
    /// ƒê·ªãa ch·ªâ contract c·ªßa token
    pub address: String,
    /// Chain ID c·ªßa blockchain m√† token ƒë∆∞·ª£c tri·ªÉn khai
    pub chain_id: u32,
    /// Source code c·ªßa contract (n·∫øu ƒë√£ verified)
    pub source_code: Option<String>,
    /// Bytecode c·ªßa contract t·ª´ blockchain
    pub bytecode: Option<String>,
    /// ABI c·ªßa contract (n·∫øu ƒë√£ verified)
    pub abi: Option<String>,
    /// C√≥ verified tr√™n explorer kh√¥ng
    pub is_verified: bool,
    /// ƒê·ªãa ch·ªâ owner c·ªßa contract
    pub owner_address: Option<String>,
}

/// Th√¥ng tin v·ªÅ m·ªôt s·ª± ki·ªán thanh kho·∫£n (add/remove liquidity)
#[derive(Debug, Clone)]
pub struct LiquidityEvent {
    /// Lo·∫°i s·ª± ki·ªán (add/remove)
    pub event_type: LiquidityEventType,
    /// Th·ªùi gian x·∫£y ra s·ª± ki·ªán (timestamp)
    pub timestamp: u64,
    /// S·ªë l∆∞·ª£ng token
    pub token_amount: String,
    /// S·ªë l∆∞·ª£ng ti·ªÅn (ETH, BNB, etc.)
    pub base_amount: String,
    /// ƒê·ªãa ch·ªâ ng∆∞·ªùi th·ª±c hi·ªán
    pub executor: String,
    /// Giao d·ªãch hash
    pub transaction_hash: String,
}

/// Lo·∫°i s·ª± ki·ªán thanh kho·∫£n
#[derive(Debug, Clone, PartialEq)]
pub enum LiquidityEventType {
    AddLiquidity,
    RemoveLiquidity,
}

/// Th√¥ng tin t·ª´ c√°c API ph√¢n t√≠ch token b√™n ngo√†i
#[derive(Debug, Clone)]
pub struct ExternalTokenReport {
    /// Ngu·ªìn b√°o c√°o (GoPlus, StaySafu, TokenSniffer, v.v.)
    pub source: ExternalReportSource,
    /// ƒêi·ªÉm r·ªßi ro (t·ª´ 0 ƒë·∫øn 100, c√†ng cao c√†ng nguy hi·ªÉm)
    pub risk_score: Option<f64>,
    /// C√°c c·∫£nh b√°o r·ªßi ro
    pub risk_flags: Vec<String>,
    /// Tr·∫°ng th√°i honeypot
    pub is_honeypot: Option<bool>,
    /// C√≥ trong blacklist kh√¥ng
    pub is_blacklisted: Option<bool>,
    /// C√°c h√†m nguy hi·ªÉm ƒë∆∞·ª£c ph√°t hi·ªán
    pub dangerous_functions: Vec<String>,
    /// D·ªØ li·ªáu b√°o c√°o g·ªëc (JSON string)
    pub raw_data: String,
}

/// Ngu·ªìn b√°o c√°o ph√¢n t√≠ch token
#[derive(Debug, Clone, PartialEq)]
pub enum ExternalReportSource {
    GoPlus,
    StaySafu,
    TokenSniffer,
    RugDoc,
    Other(String),
}

/// K·∫øt qu·∫£ ph√¢n t√≠ch quy·ªÅn owner c·ªßa contract
#[derive(Debug, Clone)]
pub struct OwnerAnalysis {
    /// ƒê·ªãa ch·ªâ owner hi·ªán t·∫°i
    pub current_owner: Option<String>,
    /// Owner ƒë√£ t·ª´ b·ªè quy·ªÅn ch∆∞a (renounced ownership)
    pub is_ownership_renounced: bool,
    /// C√≥ multisig kh√¥ng
    pub has_multisig: bool,
    /// C√≥ proxy kh√¥ng
    pub is_proxy: bool,
    /// C√≥ th·ªÉ l·∫•y l·∫°i quy·ªÅn owner sau khi t·ª´ b·ªè kh√¥ng
    pub can_retrieve_ownership: bool,
    /// C√≥ quy·ªÅn mint kh√¥ng
    pub has_mint_authority: bool,
    /// C√≥ quy·ªÅn burn kh√¥ng
    pub has_burn_authority: bool,
    /// C√≥ quy·ªÅn pause kh√¥ng
    pub has_pause_authority: bool,
}

/// K·∫øt qu·∫£ ph√¢n t√≠ch bytecode
#[derive(Debug, Clone)]
pub struct BytecodeAnalysis {
    /// Source code v√† bytecode c√≥ kh·ªõp nhau kh√¥ng
    pub is_consistent: bool,
    /// C√°c h√†m nguy hi·ªÉm ƒë∆∞·ª£c ph√°t hi·ªán trong bytecode
    pub dangerous_functions: Vec<String>,
    /// C√≥ external call kh√¥ng
    pub has_external_call: bool,
    /// C√≥ delegatecall kh√¥ng
    pub has_delegatecall: bool,
    /// C√≥ selfdestruct kh√¥ng
    pub has_selfdestruct: bool,
}

/// K·∫øt qu·∫£ ph√¢n t√≠ch n√¢ng cao
#[derive(Debug, Clone)]
pub struct AdvancedTokenAnalysis {
    /// C√≥ c∆° ch·∫ø anti-bot kh√¥ng
    pub has_anti_bot: bool,
    /// C√≥ c∆° ch·∫ø anti-whale kh√¥ng
    pub has_anti_whale: bool,
    /// C√≥ gi·ªõi h·∫°n s·ªë l∆∞·ª£ng trong v√≠ kh√¥ng
    pub has_wallet_limit: bool,
    /// C√≥ h√†m nguy hi·ªÉm kh√¥ng (mint, pause, etc.)
    pub has_dangerous_functions: bool,
    /// C√≥ thanh kho·∫£n ƒë·ªß kh√¥ng
    pub has_sufficient_liquidity: bool,
    /// Thanh kho·∫£n ƒë√£ kh√≥a ch∆∞a
    pub has_locked_liquidity: bool,
    /// Th·ªùi gian kh√≥a thanh kho·∫£n (gi√¢y)
    pub liquidity_lock_time: u64,
}

/// B√°o c√°o ƒë·∫ßy ƒë·ªß v·ªÅ token
#[derive(Debug, Clone)]
pub struct TokenReport {
    /// ƒê·ªãa ch·ªâ contract c·ªßa token
    pub token_address: String,
    /// Chain ID c·ªßa blockchain
    pub chain_id: u32,
    /// M·ª©c ƒë·ªô an to√†n c·ªßa token
    pub token_safety: TokenSafety,
    /// ƒêi·ªÉm r·ªßi ro (0-100)
    pub risk_score: f64,
    /// C√°c v·∫•n ƒë·ªÅ ƒë∆∞·ª£c ph√°t hi·ªán
    pub issues: Vec<(TokenIssue, IssueSeverity)>,
    /// M·∫´u contract ƒë∆∞·ª£c ph√°t hi·ªán
    pub contract_template: Option<String>,
    /// C√≥ whitelist kh√¥ng
    pub has_whitelist: bool,
    /// C√≥ blacklist kh√¥ng
    pub has_blacklist: bool,
    /// C√≥ gi·ªõi h·∫°n giao d·ªãch kh√¥ng
    pub has_transaction_limit: bool,
    /// C√≥ t√≠nh nƒÉng anti-whale kh√¥ng
    pub has_anti_whale: bool,
    /// C√≥ th·ªùi gian ch·ªù gi·ªØa c√°c giao d·ªãch kh√¥ng
    pub has_cooldown: bool,
    /// Owner ƒë√£ t·ª´ b·ªè quy·ªÅn ch∆∞a
    pub is_ownership_renounced: bool,
    /// C√°c h√†m nguy hi·ªÉm ƒë∆∞·ª£c ph√°t hi·ªán
    pub dangerous_functions: Vec<String>,
    /// L√† proxy contract c√≥ th·ªÉ upgrade kh√¥ng
    pub is_proxy_contract: bool,
    /// C√≥ fees/tax ·∫©n kh√¥ng
    pub has_hidden_fees: bool,
    /// C√≥ b·∫•t th∆∞·ªùng trong l·ªãch s·ª≠ thanh kho·∫£n kh√¥ng
    pub has_abnormal_liquidity: bool,
    /// C√≥ external calls/delegatecall kh√¥ng
    pub has_external_calls: bool,
    /// Source code c√≥ kh·ªõp v·ªõi bytecode kh√¥ng
    pub is_source_consistent: bool,
    /// B√°o c√°o t·ª´ c√°c API b√™n ngo√†i
    pub external_reports: Vec<String>,
}

impl TokenReport {
    /// T·∫°o b√°o c√°o token m·ªõi
    pub fn new(
        token_address: String,
        chain_id: u32,
        token_safety: TokenSafety,
        risk_score: f64,
    ) -> Self {
        Self {
            token_address,
            chain_id,
            token_safety,
            risk_score,
            issues: Vec::new(),
            contract_template: None,
            has_whitelist: false,
            has_blacklist: false,
            has_transaction_limit: false,
            has_anti_whale: false,
            has_cooldown: false,
            is_ownership_renounced: false,
            dangerous_functions: Vec::new(),
            is_proxy_contract: false,
            has_hidden_fees: false,
            has_abnormal_liquidity: false,
            has_external_calls: false,
            is_source_consistent: true,
            external_reports: Vec::new(),
        }
    }
} 